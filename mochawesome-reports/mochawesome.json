{
  "reportTitle": "supertestPractice",
  "stats": {
    "suites": 3,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2016-08-15T09:24:02.027Z",
    "end": "2016-08-15T09:24:12.600Z",
    "duration": 10573,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Test Google Book API",
        "suites": [
          {
            "title": "Google book API-Volume API",
            "suites": [],
            "tests": [
              {
                "title": "Scenario 1: Search books with a keyword - API",
                "fullTitle": "Test Google Book API Google book API-Volume API Scenario 1: Search books with a keyword - API",
                "timedOut": false,
                "duration": 1796,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request<br>                .get(<span class=\"hljs-string\">'?q=API'</span>)<br>                .expect(<span class=\"hljs-number\">200</span>, done)",
                "isRoot": false,
                "uuid": "32b99e7f-fe70-4782-9524-8556f763dd04",
                "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
                "skipped": false
              },
              {
                "title": "Scenario 2: Search books with two parameters (q=API and maxResults=2)",
                "fullTitle": "Test Google Book API Google book API-Volume API Scenario 2: Search books with two parameters (q=API and maxResults=2)",
                "timedOut": false,
                "duration": 680,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> q = <span class=\"hljs-string\">'api'</span>;<br>            <span class=\"hljs-keyword\">var</span> maxResults = <span class=\"hljs-number\">2</span>;<br>            request<br>                .get(<span class=\"hljs-string\">'/'</span>)<br>                .query({<br>                    q: q,<br>                    maxResults: maxResults<br>                })<br>                .expect(<span class=\"hljs-number\">200</span>)<br>                .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                    id = res.body.items[<span class=\"hljs-number\">0</span>].id;<br>                    <span class=\"hljs-keyword\">var</span> selfLinkLength = res.body.items[<span class=\"hljs-number\">0</span>].selfLink.split(<span class=\"hljs-string\">'/'</span>).length;<br>                    <span class=\"hljs-keyword\">var</span> selfLinkId = res.body.items[<span class=\"hljs-number\">0</span>].selfLink.split(<span class=\"hljs-string\">'/'</span>)[selfLinkLength - <span class=\"hljs-number\">1</span>];<br>                    expect(res.body.items[<span class=\"hljs-number\">0</span>].volumeInfo.title).to.contains(<span class=\"hljs-string\">'API'</span>);<br>                    expect(res.body.items.length).to.be.at.most(maxResults);<br>                    expect(selfLinkId).to.equals(id);<br>                    expect(res.body).to.include.keys(<span class=\"hljs-string\">'kind'</span>, <span class=\"hljs-string\">'totalItems'</span>, <span class=\"hljs-string\">'items'</span>);<br>                })<br>                .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>                    done(err);<br>                })",
                "isRoot": false,
                "uuid": "96911364-b9e0-4762-88e5-314da2d5edba",
                "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
                "skipped": false
              },
              {
                "title": "Scenario 3: Retrieves a Volume resource based on ID, the ID in request URL is from Scenario 2",
                "fullTitle": "Test Google Book API Google book API-Volume API Scenario 3: Retrieves a Volume resource based on ID, the ID in request URL is from Scenario 2",
                "timedOut": false,
                "duration": 420,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br><span class=\"hljs-built_in\">console</span>.log(id);<br>request<br>    .get(<span class=\"hljs-string\">'/'</span> + id)<br>    .expect(<span class=\"hljs-number\">200</span>)<br>    .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>        expect(res.body.id).to.equal(id);<br>    })<br>    .end(done)",
                "isRoot": false,
                "uuid": "254818b6-2370-40b9-9954-dd715900a394",
                "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "/test/book_api.js",
            "uuid": "02154bf0-b477-4c58-895d-dd31e1603e56",
            "fullFile": "/Users/chenli/Documents/Projects/API/supertestPractice/test/book_api.js",
            "passes": [
              {
                "title": "Scenario 1: Search books with a keyword - API",
                "fullTitle": "Test Google Book API Google book API-Volume API Scenario 1: Search books with a keyword - API",
                "timedOut": false,
                "duration": 1796,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request<br>                .get(<span class=\"hljs-string\">'?q=API'</span>)<br>                .expect(<span class=\"hljs-number\">200</span>, done)",
                "isRoot": false,
                "uuid": "32b99e7f-fe70-4782-9524-8556f763dd04",
                "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
                "skipped": false
              },
              {
                "title": "Scenario 2: Search books with two parameters (q=API and maxResults=2)",
                "fullTitle": "Test Google Book API Google book API-Volume API Scenario 2: Search books with two parameters (q=API and maxResults=2)",
                "timedOut": false,
                "duration": 680,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> q = <span class=\"hljs-string\">'api'</span>;<br>            <span class=\"hljs-keyword\">var</span> maxResults = <span class=\"hljs-number\">2</span>;<br>            request<br>                .get(<span class=\"hljs-string\">'/'</span>)<br>                .query({<br>                    q: q,<br>                    maxResults: maxResults<br>                })<br>                .expect(<span class=\"hljs-number\">200</span>)<br>                .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                    id = res.body.items[<span class=\"hljs-number\">0</span>].id;<br>                    <span class=\"hljs-keyword\">var</span> selfLinkLength = res.body.items[<span class=\"hljs-number\">0</span>].selfLink.split(<span class=\"hljs-string\">'/'</span>).length;<br>                    <span class=\"hljs-keyword\">var</span> selfLinkId = res.body.items[<span class=\"hljs-number\">0</span>].selfLink.split(<span class=\"hljs-string\">'/'</span>)[selfLinkLength - <span class=\"hljs-number\">1</span>];<br>                    expect(res.body.items[<span class=\"hljs-number\">0</span>].volumeInfo.title).to.contains(<span class=\"hljs-string\">'API'</span>);<br>                    expect(res.body.items.length).to.be.at.most(maxResults);<br>                    expect(selfLinkId).to.equals(id);<br>                    expect(res.body).to.include.keys(<span class=\"hljs-string\">'kind'</span>, <span class=\"hljs-string\">'totalItems'</span>, <span class=\"hljs-string\">'items'</span>);<br>                })<br>                .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>                    done(err);<br>                })",
                "isRoot": false,
                "uuid": "96911364-b9e0-4762-88e5-314da2d5edba",
                "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
                "skipped": false
              },
              {
                "title": "Scenario 3: Retrieves a Volume resource based on ID, the ID in request URL is from Scenario 2",
                "fullTitle": "Test Google Book API Google book API-Volume API Scenario 3: Retrieves a Volume resource based on ID, the ID in request URL is from Scenario 2",
                "timedOut": false,
                "duration": 420,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br><span class=\"hljs-built_in\">console</span>.log(id);<br>request<br>    .get(<span class=\"hljs-string\">'/'</span> + id)<br>    .expect(<span class=\"hljs-number\">200</span>)<br>    .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>        expect(res.body.id).to.equal(id);<br>    })<br>    .end(done)",
                "isRoot": false,
                "uuid": "254818b6-2370-40b9-9954-dd715900a394",
                "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2896
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/book_api.js",
        "uuid": "96fbbe71-c6af-44d4-94f3-fbf8f476e8a4",
        "fullFile": "/Users/chenli/Documents/Projects/API/supertestPractice/test/book_api.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "GOOGLE SHEETS API",
        "suites": [],
        "tests": [
          {
            "title": "Scenario 4: Add a new sheet -LC",
            "fullTitle": "GOOGLE SHEETS API Scenario 4: Add a new sheet -LC",
            "timedOut": false,
            "duration": 803,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br>        <span class=\"hljs-keyword\">var</span> singleSheetBody = {<br>            <span class=\"hljs-string\">\"requests\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"addSheet\"</span>: {<br>                        <span class=\"hljs-string\">\"properties\"</span>: {<br>                            <span class=\"hljs-string\">\"title\"</span>: titleName,<br>                            <span class=\"hljs-string\">\"gridProperties\"</span>: {<br>                                <span class=\"hljs-string\">\"rowCount\"</span>: <span class=\"hljs-number\">20</span>,<br>                                <span class=\"hljs-string\">\"columnCount\"</span>: <span class=\"hljs-number\">12</span><br>                            },<br>                            <span class=\"hljs-string\">\"tabColor\"</span>: {<br>                                <span class=\"hljs-string\">\"red\"</span>: <span class=\"hljs-number\">1.0</span>,<br>                                <span class=\"hljs-string\">\"green\"</span>: <span class=\"hljs-number\">0.3</span>,<br>                                <span class=\"hljs-string\">\"blue\"</span>: <span class=\"hljs-number\">0.4</span><br>                            }<br>                        }<br>                    }<br>                }<br>            ]<br>        }<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">':batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(singleSheetBody)<br>            .expect(<span class=\"hljs-number\">200</span>)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                <span class=\"hljs-built_in\">console</span>.log(res.body.spreadsheetId);<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.replies[<span class=\"hljs-number\">0</span>].addSheet.properties.title).to.equal(titleName);<br>            })<br>            .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err,res</span>) </span>{<br>                deleteId = res.body.replies[<span class=\"hljs-number\">0</span>].addSheet.properties.sheetId;<br>                done(err);<br>            })",
            "isRoot": false,
            "uuid": "8c334fcb-665a-40da-a2c4-8f0cf63d2c4f",
            "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
            "skipped": false
          },
          {
            "title": "Scenario 5: Write to multiple ranges",
            "fullTitle": "GOOGLE SHEETS API Scenario 5: Write to multiple ranges",
            "timedOut": false,
            "duration": 1843,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br>        <span class=\"hljs-keyword\">var</span> multipleRangesBody = {<br>            <span class=\"hljs-string\">\"valueInputOption\"</span>: <span class=\"hljs-string\">\"USER_ENTERED\"</span>,<br>            <span class=\"hljs-string\">\"data\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"range\"</span>: <span class=\"hljs-string\">\"LC!A1:A4\"</span>,<br>                    <span class=\"hljs-string\">\"majorDimension\"</span>: <span class=\"hljs-string\">\"COLUMNS\"</span>,<br>                    <span class=\"hljs-string\">\"values\"</span>: [<br>                        [<span class=\"hljs-string\">\"Item\"</span>, <span class=\"hljs-string\">\"Wheel\"</span>, <span class=\"hljs-string\">\"Door\"</span>, <span class=\"hljs-string\">\"Engine\"</span>]<br>                    ]<br>                },<br>                {<br>                    <span class=\"hljs-string\">\"range\"</span>: <span class=\"hljs-string\">\"LC!B1:D2\"</span>,<br>                    <span class=\"hljs-string\">\"majorDimension\"</span>: <span class=\"hljs-string\">\"ROWS\"</span>,<br>                    <span class=\"hljs-string\">\"values\"</span>: [<br>                        [<span class=\"hljs-string\">\"Cost\"</span>, <span class=\"hljs-string\">\"Stocked\"</span>, <span class=\"hljs-string\">\"Ship Date\"</span>],<br>                        [<span class=\"hljs-string\">\"$20.50\"</span>, <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"3/1/2016\"</span>]<br>                    ]<br>                }<br>            ]<br>        };<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values:batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(multipleRangesBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.totalUpdatedCells).to.equal(<span class=\"hljs-number\">10</span>);<br>            })<br>            .end(done)",
            "isRoot": false,
            "uuid": "1cb47b80-8f07-499d-9700-6699a1b29d8d",
            "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
            "skipped": false
          },
          {
            "title": "Scenario 6: Write a single range",
            "fullTitle": "GOOGLE SHEETS API Scenario 6: Write a single range",
            "timedOut": false,
            "duration": 1635,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request.put(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values/'</span> + range)<br>            .query({valueInputOption: <span class=\"hljs-string\">'USER_ENTERED'</span>})<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(singleBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.updatedRange).to.equal(range);<br>                expect(res.body.updatedRows).to.equal(<span class=\"hljs-number\">5</span>);<br>            })<br>            .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>            done(err);<br>        })",
            "isRoot": false,
            "uuid": "6fc089f8-27d3-4aba-a881-cea57625d580",
            "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
            "skipped": false
          },
          {
            "title": "Scenario 7: Read a single range",
            "fullTitle": "GOOGLE SHEETS API Scenario 7: Read a single range",
            "timedOut": false,
            "duration": 1767,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request.get(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values/'</span> + range)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.range).to.equal(range);<br>            }).end(done)",
            "isRoot": false,
            "uuid": "147769f9-c1ec-45af-85ed-df1fba4efd92",
            "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
            "skipped": false
          },
          {
            "title": "Scenario 8: Delete a sheet by ID",
            "fullTitle": "GOOGLE SHEETS API Scenario 8: Delete a sheet by ID",
            "timedOut": false,
            "duration": 1614,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> deleteBody = {<br>            <span class=\"hljs-string\">\"requests\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"deleteSheet\"</span>: {<br>                        <span class=\"hljs-string\">\"sheetId\"</span>: deleteId<br>                    }<br>                }<br>            ]<br>        }<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">':batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(deleteBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId)<br>            }).end(done)",
            "isRoot": false,
            "uuid": "ed07278f-d8cf-42bc-8378-8d8a10864468",
            "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/sheet_api.js",
        "uuid": "4d05e463-5205-4584-b627-550fc4270778",
        "fullFile": "/Users/chenli/Documents/Projects/API/supertestPractice/test/sheet_api.js",
        "passes": [
          {
            "title": "Scenario 4: Add a new sheet -LC",
            "fullTitle": "GOOGLE SHEETS API Scenario 4: Add a new sheet -LC",
            "timedOut": false,
            "duration": 803,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br>        <span class=\"hljs-keyword\">var</span> singleSheetBody = {<br>            <span class=\"hljs-string\">\"requests\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"addSheet\"</span>: {<br>                        <span class=\"hljs-string\">\"properties\"</span>: {<br>                            <span class=\"hljs-string\">\"title\"</span>: titleName,<br>                            <span class=\"hljs-string\">\"gridProperties\"</span>: {<br>                                <span class=\"hljs-string\">\"rowCount\"</span>: <span class=\"hljs-number\">20</span>,<br>                                <span class=\"hljs-string\">\"columnCount\"</span>: <span class=\"hljs-number\">12</span><br>                            },<br>                            <span class=\"hljs-string\">\"tabColor\"</span>: {<br>                                <span class=\"hljs-string\">\"red\"</span>: <span class=\"hljs-number\">1.0</span>,<br>                                <span class=\"hljs-string\">\"green\"</span>: <span class=\"hljs-number\">0.3</span>,<br>                                <span class=\"hljs-string\">\"blue\"</span>: <span class=\"hljs-number\">0.4</span><br>                            }<br>                        }<br>                    }<br>                }<br>            ]<br>        }<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">':batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(singleSheetBody)<br>            .expect(<span class=\"hljs-number\">200</span>)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                <span class=\"hljs-built_in\">console</span>.log(res.body.spreadsheetId);<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.replies[<span class=\"hljs-number\">0</span>].addSheet.properties.title).to.equal(titleName);<br>            })<br>            .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err,res</span>) </span>{<br>                deleteId = res.body.replies[<span class=\"hljs-number\">0</span>].addSheet.properties.sheetId;<br>                done(err);<br>            })",
            "isRoot": false,
            "uuid": "8c334fcb-665a-40da-a2c4-8f0cf63d2c4f",
            "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
            "skipped": false
          },
          {
            "title": "Scenario 5: Write to multiple ranges",
            "fullTitle": "GOOGLE SHEETS API Scenario 5: Write to multiple ranges",
            "timedOut": false,
            "duration": 1843,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br>        <span class=\"hljs-keyword\">var</span> multipleRangesBody = {<br>            <span class=\"hljs-string\">\"valueInputOption\"</span>: <span class=\"hljs-string\">\"USER_ENTERED\"</span>,<br>            <span class=\"hljs-string\">\"data\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"range\"</span>: <span class=\"hljs-string\">\"LC!A1:A4\"</span>,<br>                    <span class=\"hljs-string\">\"majorDimension\"</span>: <span class=\"hljs-string\">\"COLUMNS\"</span>,<br>                    <span class=\"hljs-string\">\"values\"</span>: [<br>                        [<span class=\"hljs-string\">\"Item\"</span>, <span class=\"hljs-string\">\"Wheel\"</span>, <span class=\"hljs-string\">\"Door\"</span>, <span class=\"hljs-string\">\"Engine\"</span>]<br>                    ]<br>                },<br>                {<br>                    <span class=\"hljs-string\">\"range\"</span>: <span class=\"hljs-string\">\"LC!B1:D2\"</span>,<br>                    <span class=\"hljs-string\">\"majorDimension\"</span>: <span class=\"hljs-string\">\"ROWS\"</span>,<br>                    <span class=\"hljs-string\">\"values\"</span>: [<br>                        [<span class=\"hljs-string\">\"Cost\"</span>, <span class=\"hljs-string\">\"Stocked\"</span>, <span class=\"hljs-string\">\"Ship Date\"</span>],<br>                        [<span class=\"hljs-string\">\"$20.50\"</span>, <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"3/1/2016\"</span>]<br>                    ]<br>                }<br>            ]<br>        };<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values:batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(multipleRangesBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.totalUpdatedCells).to.equal(<span class=\"hljs-number\">10</span>);<br>            })<br>            .end(done)",
            "isRoot": false,
            "uuid": "1cb47b80-8f07-499d-9700-6699a1b29d8d",
            "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
            "skipped": false
          },
          {
            "title": "Scenario 6: Write a single range",
            "fullTitle": "GOOGLE SHEETS API Scenario 6: Write a single range",
            "timedOut": false,
            "duration": 1635,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request.put(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values/'</span> + range)<br>            .query({valueInputOption: <span class=\"hljs-string\">'USER_ENTERED'</span>})<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(singleBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.updatedRange).to.equal(range);<br>                expect(res.body.updatedRows).to.equal(<span class=\"hljs-number\">5</span>);<br>            })<br>            .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>            done(err);<br>        })",
            "isRoot": false,
            "uuid": "6fc089f8-27d3-4aba-a881-cea57625d580",
            "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
            "skipped": false
          },
          {
            "title": "Scenario 7: Read a single range",
            "fullTitle": "GOOGLE SHEETS API Scenario 7: Read a single range",
            "timedOut": false,
            "duration": 1767,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request.get(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values/'</span> + range)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.range).to.equal(range);<br>            }).end(done)",
            "isRoot": false,
            "uuid": "147769f9-c1ec-45af-85ed-df1fba4efd92",
            "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
            "skipped": false
          },
          {
            "title": "Scenario 8: Delete a sheet by ID",
            "fullTitle": "GOOGLE SHEETS API Scenario 8: Delete a sheet by ID",
            "timedOut": false,
            "duration": 1614,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> deleteBody = {<br>            <span class=\"hljs-string\">\"requests\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"deleteSheet\"</span>: {<br>                        <span class=\"hljs-string\">\"sheetId\"</span>: deleteId<br>                    }<br>                }<br>            ]<br>        }<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">':batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(deleteBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId)<br>            }).end(done)",
            "isRoot": false,
            "uuid": "ed07278f-d8cf-42bc-8378-8d8a10864468",
            "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 7662
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "f52e0466-8e34-47a8-8aa5-014ee75b9484",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Scenario 1: Search books with a keyword - API",
      "fullTitle": "Google book API-Volume API Scenario 1: Search books with a keyword - API",
      "timedOut": false,
      "duration": 1796,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request<br>                .get(<span class=\"hljs-string\">'?q=API'</span>)<br>                .expect(<span class=\"hljs-number\">200</span>, done)",
      "isRoot": false,
      "uuid": "7d795ef1-0b5e-435e-b1a3-fc6e577e114d",
      "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
      "skipped": false
    },
    {
      "title": "Scenario 2: Search books with two parameters (q=API and maxResults=2)",
      "fullTitle": "Google book API-Volume API Scenario 2: Search books with two parameters (q=API and maxResults=2)",
      "timedOut": false,
      "duration": 680,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> q = <span class=\"hljs-string\">'api'</span>;<br>            <span class=\"hljs-keyword\">var</span> maxResults = <span class=\"hljs-number\">2</span>;<br>            request<br>                .get(<span class=\"hljs-string\">'/'</span>)<br>                .query({<br>                    q: q,<br>                    maxResults: maxResults<br>                })<br>                .expect(<span class=\"hljs-number\">200</span>)<br>                .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                    id = res.body.items[<span class=\"hljs-number\">0</span>].id;<br>                    <span class=\"hljs-keyword\">var</span> selfLinkLength = res.body.items[<span class=\"hljs-number\">0</span>].selfLink.split(<span class=\"hljs-string\">'/'</span>).length;<br>                    <span class=\"hljs-keyword\">var</span> selfLinkId = res.body.items[<span class=\"hljs-number\">0</span>].selfLink.split(<span class=\"hljs-string\">'/'</span>)[selfLinkLength - <span class=\"hljs-number\">1</span>];<br>                    expect(res.body.items[<span class=\"hljs-number\">0</span>].volumeInfo.title).to.contains(<span class=\"hljs-string\">'API'</span>);<br>                    expect(res.body.items.length).to.be.at.most(maxResults);<br>                    expect(selfLinkId).to.equals(id);<br>                    expect(res.body).to.include.keys(<span class=\"hljs-string\">'kind'</span>, <span class=\"hljs-string\">'totalItems'</span>, <span class=\"hljs-string\">'items'</span>);<br>                })<br>                .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>                    done(err);<br>                })",
      "isRoot": false,
      "uuid": "16cd9acc-7a8d-49e0-a5ef-ab07021d6830",
      "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
      "skipped": false
    },
    {
      "title": "Scenario 3: Retrieves a Volume resource based on ID, the ID in request URL is from Scenario 2",
      "fullTitle": "Google book API-Volume API Scenario 3: Retrieves a Volume resource based on ID, the ID in request URL is from Scenario 2",
      "timedOut": false,
      "duration": 420,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br><span class=\"hljs-built_in\">console</span>.log(id);<br>request<br>    .get(<span class=\"hljs-string\">'/'</span> + id)<br>    .expect(<span class=\"hljs-number\">200</span>)<br>    .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>        expect(res.body.id).to.equal(id);<br>    })<br>    .end(done)",
      "isRoot": false,
      "uuid": "5b5695ca-84ff-49c1-ac94-cd62bee904c1",
      "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
      "skipped": false
    },
    {
      "title": "Scenario 4: Add a new sheet -LC",
      "fullTitle": "GOOGLE SHEETS API Scenario 4: Add a new sheet -LC",
      "timedOut": false,
      "duration": 803,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br>        <span class=\"hljs-keyword\">var</span> singleSheetBody = {<br>            <span class=\"hljs-string\">\"requests\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"addSheet\"</span>: {<br>                        <span class=\"hljs-string\">\"properties\"</span>: {<br>                            <span class=\"hljs-string\">\"title\"</span>: titleName,<br>                            <span class=\"hljs-string\">\"gridProperties\"</span>: {<br>                                <span class=\"hljs-string\">\"rowCount\"</span>: <span class=\"hljs-number\">20</span>,<br>                                <span class=\"hljs-string\">\"columnCount\"</span>: <span class=\"hljs-number\">12</span><br>                            },<br>                            <span class=\"hljs-string\">\"tabColor\"</span>: {<br>                                <span class=\"hljs-string\">\"red\"</span>: <span class=\"hljs-number\">1.0</span>,<br>                                <span class=\"hljs-string\">\"green\"</span>: <span class=\"hljs-number\">0.3</span>,<br>                                <span class=\"hljs-string\">\"blue\"</span>: <span class=\"hljs-number\">0.4</span><br>                            }<br>                        }<br>                    }<br>                }<br>            ]<br>        }<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">':batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(singleSheetBody)<br>            .expect(<span class=\"hljs-number\">200</span>)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                <span class=\"hljs-built_in\">console</span>.log(res.body.spreadsheetId);<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.replies[<span class=\"hljs-number\">0</span>].addSheet.properties.title).to.equal(titleName);<br>            })<br>            .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err,res</span>) </span>{<br>                deleteId = res.body.replies[<span class=\"hljs-number\">0</span>].addSheet.properties.sheetId;<br>                done(err);<br>            })",
      "isRoot": false,
      "uuid": "528890c2-3a97-4261-b030-28f2cfcefd93",
      "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
      "skipped": false
    },
    {
      "title": "Scenario 5: Write to multiple ranges",
      "fullTitle": "GOOGLE SHEETS API Scenario 5: Write to multiple ranges",
      "timedOut": false,
      "duration": 1843,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br>        <span class=\"hljs-keyword\">var</span> multipleRangesBody = {<br>            <span class=\"hljs-string\">\"valueInputOption\"</span>: <span class=\"hljs-string\">\"USER_ENTERED\"</span>,<br>            <span class=\"hljs-string\">\"data\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"range\"</span>: <span class=\"hljs-string\">\"LC!A1:A4\"</span>,<br>                    <span class=\"hljs-string\">\"majorDimension\"</span>: <span class=\"hljs-string\">\"COLUMNS\"</span>,<br>                    <span class=\"hljs-string\">\"values\"</span>: [<br>                        [<span class=\"hljs-string\">\"Item\"</span>, <span class=\"hljs-string\">\"Wheel\"</span>, <span class=\"hljs-string\">\"Door\"</span>, <span class=\"hljs-string\">\"Engine\"</span>]<br>                    ]<br>                },<br>                {<br>                    <span class=\"hljs-string\">\"range\"</span>: <span class=\"hljs-string\">\"LC!B1:D2\"</span>,<br>                    <span class=\"hljs-string\">\"majorDimension\"</span>: <span class=\"hljs-string\">\"ROWS\"</span>,<br>                    <span class=\"hljs-string\">\"values\"</span>: [<br>                        [<span class=\"hljs-string\">\"Cost\"</span>, <span class=\"hljs-string\">\"Stocked\"</span>, <span class=\"hljs-string\">\"Ship Date\"</span>],<br>                        [<span class=\"hljs-string\">\"$20.50\"</span>, <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"3/1/2016\"</span>]<br>                    ]<br>                }<br>            ]<br>        };<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values:batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(multipleRangesBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.totalUpdatedCells).to.equal(<span class=\"hljs-number\">10</span>);<br>            })<br>            .end(done)",
      "isRoot": false,
      "uuid": "0c5b8d92-1cb1-45b1-8d37-54be15204cab",
      "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
      "skipped": false
    },
    {
      "title": "Scenario 6: Write a single range",
      "fullTitle": "GOOGLE SHEETS API Scenario 6: Write a single range",
      "timedOut": false,
      "duration": 1635,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request.put(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values/'</span> + range)<br>            .query({valueInputOption: <span class=\"hljs-string\">'USER_ENTERED'</span>})<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(singleBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.updatedRange).to.equal(range);<br>                expect(res.body.updatedRows).to.equal(<span class=\"hljs-number\">5</span>);<br>            })<br>            .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>            done(err);<br>        })",
      "isRoot": false,
      "uuid": "ef580f38-8cc2-477b-81d1-024540e95cb1",
      "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
      "skipped": false
    },
    {
      "title": "Scenario 7: Read a single range",
      "fullTitle": "GOOGLE SHEETS API Scenario 7: Read a single range",
      "timedOut": false,
      "duration": 1767,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request.get(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values/'</span> + range)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.range).to.equal(range);<br>            }).end(done)",
      "isRoot": false,
      "uuid": "f803e6f0-d58d-458d-8be1-479e699d2c97",
      "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
      "skipped": false
    },
    {
      "title": "Scenario 8: Delete a sheet by ID",
      "fullTitle": "GOOGLE SHEETS API Scenario 8: Delete a sheet by ID",
      "timedOut": false,
      "duration": 1614,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> deleteBody = {<br>            <span class=\"hljs-string\">\"requests\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"deleteSheet\"</span>: {<br>                        <span class=\"hljs-string\">\"sheetId\"</span>: deleteId<br>                    }<br>                }<br>            ]<br>        }<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">':batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(deleteBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId)<br>            }).end(done)",
      "isRoot": false,
      "uuid": "64c08429-bca9-4a7a-b665-2c22f8fde5b4",
      "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Scenario 1: Search books with a keyword - API",
      "fullTitle": "Google book API-Volume API Scenario 1: Search books with a keyword - API",
      "timedOut": false,
      "duration": 1796,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request<br>                .get(<span class=\"hljs-string\">'?q=API'</span>)<br>                .expect(<span class=\"hljs-number\">200</span>, done)",
      "isRoot": false,
      "uuid": "085381f7-fcd6-48f4-b4a5-17f964396fb6",
      "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
      "skipped": false
    },
    {
      "title": "Scenario 2: Search books with two parameters (q=API and maxResults=2)",
      "fullTitle": "Google book API-Volume API Scenario 2: Search books with two parameters (q=API and maxResults=2)",
      "timedOut": false,
      "duration": 680,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> q = <span class=\"hljs-string\">'api'</span>;<br>            <span class=\"hljs-keyword\">var</span> maxResults = <span class=\"hljs-number\">2</span>;<br>            request<br>                .get(<span class=\"hljs-string\">'/'</span>)<br>                .query({<br>                    q: q,<br>                    maxResults: maxResults<br>                })<br>                .expect(<span class=\"hljs-number\">200</span>)<br>                .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                    id = res.body.items[<span class=\"hljs-number\">0</span>].id;<br>                    <span class=\"hljs-keyword\">var</span> selfLinkLength = res.body.items[<span class=\"hljs-number\">0</span>].selfLink.split(<span class=\"hljs-string\">'/'</span>).length;<br>                    <span class=\"hljs-keyword\">var</span> selfLinkId = res.body.items[<span class=\"hljs-number\">0</span>].selfLink.split(<span class=\"hljs-string\">'/'</span>)[selfLinkLength - <span class=\"hljs-number\">1</span>];<br>                    expect(res.body.items[<span class=\"hljs-number\">0</span>].volumeInfo.title).to.contains(<span class=\"hljs-string\">'API'</span>);<br>                    expect(res.body.items.length).to.be.at.most(maxResults);<br>                    expect(selfLinkId).to.equals(id);<br>                    expect(res.body).to.include.keys(<span class=\"hljs-string\">'kind'</span>, <span class=\"hljs-string\">'totalItems'</span>, <span class=\"hljs-string\">'items'</span>);<br>                })<br>                .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>                    done(err);<br>                })",
      "isRoot": false,
      "uuid": "a039058e-75c9-4d6a-adbd-eaa535dab85f",
      "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
      "skipped": false
    },
    {
      "title": "Scenario 3: Retrieves a Volume resource based on ID, the ID in request URL is from Scenario 2",
      "fullTitle": "Google book API-Volume API Scenario 3: Retrieves a Volume resource based on ID, the ID in request URL is from Scenario 2",
      "timedOut": false,
      "duration": 420,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br><span class=\"hljs-built_in\">console</span>.log(id);<br>request<br>    .get(<span class=\"hljs-string\">'/'</span> + id)<br>    .expect(<span class=\"hljs-number\">200</span>)<br>    .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>        expect(res.body.id).to.equal(id);<br>    })<br>    .end(done)",
      "isRoot": false,
      "uuid": "56760ff6-22e5-4a9a-b446-7f97c0a97fc6",
      "parentUUID": "02154bf0-b477-4c58-895d-dd31e1603e56",
      "skipped": false
    },
    {
      "title": "Scenario 4: Add a new sheet -LC",
      "fullTitle": "GOOGLE SHEETS API Scenario 4: Add a new sheet -LC",
      "timedOut": false,
      "duration": 803,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br>        <span class=\"hljs-keyword\">var</span> singleSheetBody = {<br>            <span class=\"hljs-string\">\"requests\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"addSheet\"</span>: {<br>                        <span class=\"hljs-string\">\"properties\"</span>: {<br>                            <span class=\"hljs-string\">\"title\"</span>: titleName,<br>                            <span class=\"hljs-string\">\"gridProperties\"</span>: {<br>                                <span class=\"hljs-string\">\"rowCount\"</span>: <span class=\"hljs-number\">20</span>,<br>                                <span class=\"hljs-string\">\"columnCount\"</span>: <span class=\"hljs-number\">12</span><br>                            },<br>                            <span class=\"hljs-string\">\"tabColor\"</span>: {<br>                                <span class=\"hljs-string\">\"red\"</span>: <span class=\"hljs-number\">1.0</span>,<br>                                <span class=\"hljs-string\">\"green\"</span>: <span class=\"hljs-number\">0.3</span>,<br>                                <span class=\"hljs-string\">\"blue\"</span>: <span class=\"hljs-number\">0.4</span><br>                            }<br>                        }<br>                    }<br>                }<br>            ]<br>        }<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">':batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(singleSheetBody)<br>            .expect(<span class=\"hljs-number\">200</span>)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                <span class=\"hljs-built_in\">console</span>.log(res.body.spreadsheetId);<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.replies[<span class=\"hljs-number\">0</span>].addSheet.properties.title).to.equal(titleName);<br>            })<br>            .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err,res</span>) </span>{<br>                deleteId = res.body.replies[<span class=\"hljs-number\">0</span>].addSheet.properties.sheetId;<br>                done(err);<br>            })",
      "isRoot": false,
      "uuid": "2e919ecd-4978-4d58-8d60-dae859462555",
      "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
      "skipped": false
    },
    {
      "title": "Scenario 5: Write to multiple ranges",
      "fullTitle": "GOOGLE SHEETS API Scenario 5: Write to multiple ranges",
      "timedOut": false,
      "duration": 1843,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">10000</span>);<br>        <span class=\"hljs-keyword\">var</span> multipleRangesBody = {<br>            <span class=\"hljs-string\">\"valueInputOption\"</span>: <span class=\"hljs-string\">\"USER_ENTERED\"</span>,<br>            <span class=\"hljs-string\">\"data\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"range\"</span>: <span class=\"hljs-string\">\"LC!A1:A4\"</span>,<br>                    <span class=\"hljs-string\">\"majorDimension\"</span>: <span class=\"hljs-string\">\"COLUMNS\"</span>,<br>                    <span class=\"hljs-string\">\"values\"</span>: [<br>                        [<span class=\"hljs-string\">\"Item\"</span>, <span class=\"hljs-string\">\"Wheel\"</span>, <span class=\"hljs-string\">\"Door\"</span>, <span class=\"hljs-string\">\"Engine\"</span>]<br>                    ]<br>                },<br>                {<br>                    <span class=\"hljs-string\">\"range\"</span>: <span class=\"hljs-string\">\"LC!B1:D2\"</span>,<br>                    <span class=\"hljs-string\">\"majorDimension\"</span>: <span class=\"hljs-string\">\"ROWS\"</span>,<br>                    <span class=\"hljs-string\">\"values\"</span>: [<br>                        [<span class=\"hljs-string\">\"Cost\"</span>, <span class=\"hljs-string\">\"Stocked\"</span>, <span class=\"hljs-string\">\"Ship Date\"</span>],<br>                        [<span class=\"hljs-string\">\"$20.50\"</span>, <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"3/1/2016\"</span>]<br>                    ]<br>                }<br>            ]<br>        };<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values:batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(multipleRangesBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.totalUpdatedCells).to.equal(<span class=\"hljs-number\">10</span>);<br>            })<br>            .end(done)",
      "isRoot": false,
      "uuid": "02133f54-7590-456c-929a-cf66a133a441",
      "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
      "skipped": false
    },
    {
      "title": "Scenario 6: Write a single range",
      "fullTitle": "GOOGLE SHEETS API Scenario 6: Write a single range",
      "timedOut": false,
      "duration": 1635,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request.put(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values/'</span> + range)<br>            .query({valueInputOption: <span class=\"hljs-string\">'USER_ENTERED'</span>})<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(singleBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId);<br>                expect(res.body.updatedRange).to.equal(range);<br>                expect(res.body.updatedRows).to.equal(<span class=\"hljs-number\">5</span>);<br>            })<br>            .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>            done(err);<br>        })",
      "isRoot": false,
      "uuid": "69574676-298b-46e5-9acf-fb343d3e3688",
      "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
      "skipped": false
    },
    {
      "title": "Scenario 7: Read a single range",
      "fullTitle": "GOOGLE SHEETS API Scenario 7: Read a single range",
      "timedOut": false,
      "duration": 1767,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "request.get(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">'/values/'</span> + range)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.range).to.equal(range);<br>            }).end(done)",
      "isRoot": false,
      "uuid": "67eeb4bf-f64a-441d-a9ae-64d923252a85",
      "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
      "skipped": false
    },
    {
      "title": "Scenario 8: Delete a sheet by ID",
      "fullTitle": "GOOGLE SHEETS API Scenario 8: Delete a sheet by ID",
      "timedOut": false,
      "duration": 1614,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> deleteBody = {<br>            <span class=\"hljs-string\">\"requests\"</span>: [<br>                {<br>                    <span class=\"hljs-string\">\"deleteSheet\"</span>: {<br>                        <span class=\"hljs-string\">\"sheetId\"</span>: deleteId<br>                    }<br>                }<br>            ]<br>        }<br>        request.post(<span class=\"hljs-string\">'/'</span> + spreadsheetId + <span class=\"hljs-string\">':batchUpdate'</span>)<br>            .set(<span class=\"hljs-string\">'Authorization'</span>, accessToken)<br>            .set(<span class=\"hljs-string\">'Content-Type'</span>, jsonType)<br>            .send(deleteBody)<br>            .expect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{<br>                expect(res.body.spreadsheetId).to.equal(spreadsheetId)<br>            }).end(done)",
      "isRoot": false,
      "uuid": "0878c066-a6c6-4186-82e0-19745e0f403c",
      "parentUUID": "4d05e463-5205-4584-b627-550fc4270778",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2016
}